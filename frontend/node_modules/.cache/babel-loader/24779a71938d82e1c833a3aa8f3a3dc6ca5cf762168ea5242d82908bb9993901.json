{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5001';\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// Generate a session ID for cart operations\nconst getSessionId = () => {\n  let sessionId = localStorage.getItem('cart_session_id');\n  if (!sessionId) {\n    sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    localStorage.setItem('cart_session_id', sessionId);\n  }\n  return sessionId;\n};\n\n// Product API\nexport const productAPI = {\n  // Get all products\n  getProducts: async () => {\n    const response = await fetch(`${API_BASE_URL}/api/products`);\n    return handleResponse(response);\n  },\n  // Get single product by ID\n  getProduct: async id => {\n    const response = await fetch(`${API_BASE_URL}/api/products/${id}`);\n    return handleResponse(response);\n  },\n  // Get products by category\n  getProductsByCategory: async categorySlug => {\n    const response = await fetch(`${API_BASE_URL}/api/categories/${categorySlug}/products`);\n    return handleResponse(response);\n  }\n};\n\n// Category API\nexport const categoryAPI = {\n  // Get all categories\n  getCategories: async () => {\n    const response = await fetch(`${API_BASE_URL}/api/categories`);\n    return handleResponse(response);\n  }\n};\n\n// Cart API\nexport const cartAPI = {\n  // Get cart contents\n  getCart: async () => {\n    const sessionId = getSessionId();\n    const response = await fetch(`${API_BASE_URL}/api/cart/${sessionId}`);\n    return handleResponse(response);\n  },\n  // Add item to cart\n  addToCart: async (productId, size, quantity = 1) => {\n    const sessionId = getSessionId();\n    const response = await fetch(`${API_BASE_URL}/api/cart/${sessionId}/items`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        productId,\n        size,\n        quantity\n      })\n    });\n    return handleResponse(response);\n  },\n  // Update cart item quantity\n  updateCartItem: async (itemId, quantity) => {\n    const response = await fetch(`${API_BASE_URL}/api/cart/items/${itemId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        quantity\n      })\n    });\n    return handleResponse(response);\n  },\n  // Remove cart item\n  removeCartItem: async itemId => {\n    const response = await fetch(`${API_BASE_URL}/api/cart/items/${itemId}`, {\n      method: 'DELETE'\n    });\n    return handleResponse(response);\n  },\n  // Clear entire cart\n  clearCart: async () => {\n    const sessionId = getSessionId();\n    const response = await fetch(`${API_BASE_URL}/api/cart/${sessionId}`, {\n      method: 'DELETE'\n    });\n    return handleResponse(response);\n  }\n};\n\n// Types for API responses","map":{"version":3,"names":["API_BASE_URL","handleResponse","response","ok","errorData","json","catch","Error","error","status","getSessionId","sessionId","localStorage","getItem","Date","now","Math","random","toString","substr","setItem","productAPI","getProducts","fetch","getProduct","id","getProductsByCategory","categorySlug","categoryAPI","getCategories","cartAPI","getCart","addToCart","productId","size","quantity","method","headers","body","JSON","stringify","updateCartItem","itemId","removeCartItem","clearCart"],"sources":["/Users/ankitjain/Desktop/rony-project-1/frontend/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5001';\n\n// Helper function to handle API responses\nconst handleResponse = async (response: Response) => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// Generate a session ID for cart operations\nconst getSessionId = (): string => {\n  let sessionId = localStorage.getItem('cart_session_id');\n  if (!sessionId) {\n    sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    localStorage.setItem('cart_session_id', sessionId);\n  }\n  return sessionId;\n};\n\n// Product API\nexport const productAPI = {\n  // Get all products\n  getProducts: async () => {\n    const response = await fetch(`${API_BASE_URL}/api/products`);\n    return handleResponse(response);\n  },\n\n  // Get single product by ID\n  getProduct: async (id: number) => {\n    const response = await fetch(`${API_BASE_URL}/api/products/${id}`);\n    return handleResponse(response);\n  },\n\n  // Get products by category\n  getProductsByCategory: async (categorySlug: string) => {\n    const response = await fetch(`${API_BASE_URL}/api/categories/${categorySlug}/products`);\n    return handleResponse(response);\n  }\n};\n\n// Category API\nexport const categoryAPI = {\n  // Get all categories\n  getCategories: async () => {\n    const response = await fetch(`${API_BASE_URL}/api/categories`);\n    return handleResponse(response);\n  }\n};\n\n// Cart API\nexport const cartAPI = {\n  // Get cart contents\n  getCart: async () => {\n    const sessionId = getSessionId();\n    const response = await fetch(`${API_BASE_URL}/api/cart/${sessionId}`);\n    return handleResponse(response);\n  },\n\n  // Add item to cart\n  addToCart: async (productId: number, size?: string, quantity: number = 1) => {\n    const sessionId = getSessionId();\n    const response = await fetch(`${API_BASE_URL}/api/cart/${sessionId}/items`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ productId, size, quantity }),\n    });\n    return handleResponse(response);\n  },\n\n  // Update cart item quantity\n  updateCartItem: async (itemId: number, quantity: number) => {\n    const response = await fetch(`${API_BASE_URL}/api/cart/items/${itemId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ quantity }),\n    });\n    return handleResponse(response);\n  },\n\n  // Remove cart item\n  removeCartItem: async (itemId: number) => {\n    const response = await fetch(`${API_BASE_URL}/api/cart/items/${itemId}`, {\n      method: 'DELETE',\n    });\n    return handleResponse(response);\n  },\n\n  // Clear entire cart\n  clearCart: async () => {\n    const sessionId = getSessionId();\n    const response = await fetch(`${API_BASE_URL}/api/cart/${sessionId}`, {\n      method: 'DELETE',\n    });\n    return handleResponse(response);\n  }\n};\n\n// Types for API responses\nexport interface Product {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  originalPrice: number;\n  discount: number;\n  rating: number;\n  reviews: number;\n  category: string;\n  categorySlug: string;\n  images: string[];\n  sizes: string[];\n  inStock: boolean;\n  stockLeft: number;\n  isFeatured: number;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  slug: string;\n  description: string;\n  image: string;\n  productCount: number;\n}\n\nexport interface CartItem {\n  id: number;\n  productId: number;\n  name: string;\n  size?: string;\n  quantity: number;\n  price: number;\n  image: string;\n}\n\nexport interface CartResponse {\n  cartId: number;\n  items: CartItem[];\n  subtotal: number;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}